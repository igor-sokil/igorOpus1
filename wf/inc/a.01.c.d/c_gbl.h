#ifndef __CONST_GLOBAL__
#define __CONST_GLOBAL__







#define N_BIG    N_BG  
#define N_SMALL  N_SML


//#define N_BG   (  ((TOTAL_SIGNAL_FOR_RNG_BIG>>5)+1)  )
//#define N_SML  (  ((TOTAL_SIGNAL_FOR_RANG_SMALL_A01>>5)+1))

//Величина, яка необхідна для періодичної (період 1  мс   ) генерації переривань каналом 1 таймеру 2 з прескаллером 2000 = (1999 + 1)
#define TIM2_CCR1_VAL                   1000
#define TIM2_MIN_PERIOD_WRITE_READ      1 /*мкс*/
//Величина, яка необхідна для періодичної (період 10 мс   ) генерації переривань каналом 1 таймеру 4 з прескаллером 600 = (599 + 1)
#define TIM4_CCR1_VAL                   1000
//Величина, яка необхідна для періодичної (період 1 мс   ) генерації переривань каналом 2 таймеру 4 з прескаллером 600 = (599 + 1)
#define TIM4_CCR2_VAL                   100
//Величина, яка необхідна для періодичної (як мінімум, період 10 мкс   ) генерації переривань каналом 3 таймеру 4 з прескаллером 600 = (599 + 1)
#define TIM4_CCR3_VAL                   1
//Величина, яка необхідна для періодичної (період 0,625 мс) генерації переривань каналом 1 таймеру 3 з прескаллером 1 = (0 + 1)
#define TIM5_CCR1_2_VAL               37500

#define MAX_NUMBER_LINES_VMP            8

#define DELTA_TIME_FOR_TIMERS           1
#define PERIOD_SIGNAL_OUTPUT_MODE_2     1000 /*мс*/

#define NUMBER_INPUTS                   16
#define NUMBER_OUTPUTS                  16

#define NUMBER_LEDS                     17

#define NUMBER_UP                       8

//#define NUMBER_DEFINED_ELEMENTS         6
#define NUMBER_DEFINED_FUNCTIONS        16
#define NUMBER_DEFINED_TRIGGERS         4
#define NUMBER_DEFINED_AND              8
#define NUMBER_DEFINED_OR               8
#define NUMBER_DEFINED_XOR              8
#define NUMBER_DEFINED_NOT              16
#define NUMBER_TRANSFER_FUNCTIONS       16
#define NUMBER_LINK_FUNCTIONS           16

#define NUMBER_DEFINED_BUTTONS          6

#define NUMBER_IN_AND                   8
#define NUMBER_IN_OR                    8

#define NUMBER_GROUP_USTAVOK            4

#define N_INPUT_BOARDS          2
#define N_OUTPUT_BOARDS         3

enum _configuration {
DZ_BIT_CONFIGURATION = 0,CHP,
//MTZ_BIT_CONFIGURATION = CHP,
MTZ1_BIT_CONFIGURATION = CHP,
MTZ2_BIT_CONFIGURATION = CHP,
ZDZ_BIT_CONFIGURATION,
ZZ_BIT_CONFIGURATION,
TZNP_BIT_CONFIGURATION,
APV_BIT_CONFIGURATION,
ACHR_CHAPV_BIT_CONFIGURATION,
UROV_BIT_CONFIGURATION,
ZOP_BIT_CONFIGURATION,
UMIN_BIT_CONFIGURATION,
UMAX_BIT_CONFIGURATION,
UP_BIT_CONFIGURATION,
VMP_BIT_CONFIGURATION,
EL_BIT_CONFIGURATION,

TOTAL_NUMBER_PROTECTION,
DZO_BIT_CONFIGURATION = DZ_BIT_CONFIGURATION,
DZR_BIT_CONFIGURATION = ZOP_BIT_CONFIGURATION,
MCZO_BIT_CONFIGURATION = ZZ_BIT_CONFIGURATION,
MCZR_BIT_CONFIGURATION = TZNP_BIT_CONFIGURATION,
ZDZ_VOD_BIT_CONFIGURATION = ZDZ_BIT_CONFIGURATION
};

/*****************************************/
//Константи для ранжування дискретних входів
/*****************************************/
enum __rang_small 
{
RANG_SMALL_BLOCK_VKL_VV = 0,
RANG_SMALL_RESET_LEDS,
RANG_SMALL_RESET_RELES,
RANG_SMALL_MISCEVE_DYSTANCIJNE,
RANG_SMALL_STATE_VV,
RANG_SMALL_OTKL_VID_ZOVN_ZAHYSTIV,
RANG_SMALL_VKL_VV,
RANG_SMALL_CTRL_VKL,
RANG_SMALL_OTKL_VV,
RANG_SMALL_CTRL_OTKL,
RANG_SMALL_1_GRUPA_USTAVOK,
RANG_SMALL_2_GRUPA_USTAVOK,
RANG_SMALL_3_GRUPA_USTAVOK,
RANG_SMALL_4_GRUPA_USTAVOK,
RANG_SMALL_RESET_BLOCK_READY_TU_VID_ZAHYSTIV,

RANG_SMALL_BLOCK_DZ1,
RANG_SMALL_BLOCK_DZ2,
RANG_SMALL_BLOCK_PR_DZ2,
RANG_SMALL_OP_PR_DZ2,
RANG_SMALL_BLOCK_DZ3,
RANG_SMALL_BLOCK_PR_DZ3,
RANG_SMALL_OP_PR_DZ3,
RANG_SMALL_BLOCK_DZ4,
RANG_SMALL_BLOCK_PR_DZ4,
RANG_SMALL_OP_PR_DZ4,
RANG_SMALL_EXT_NKN_DZ,

RANG_SMALL_BLOCK_MTZ1,
RANG_SMALL_BLOCK_MTZ2,
RANG_SMALL_BLOCK_USK_MTZ2,
RANG_SMALL_BLOCK_MTZ3,
RANG_SMALL_BLOCK_MTZ4,

RANG_SMALL_BLOCK_ZDZ,
RANG_SMALL_PUSK_ZDZ_VID_DV,

RANG_SMALL_BLOCK_NZZ,

RANG_SMALL_BLOCK_TZNP1,
RANG_SMALL_BLOCK_TZNP2,
RANG_SMALL_BLOCK_TZNP3,

RANG_SMALL_STAT_BLK_APV,

RANG_SMALL_ACHR_CHAPV_VID_DV,
RANG_SMALL_BLOCK_ACHR1,
RANG_SMALL_BLOCK_ACHR2,

RANG_SMALL_PUSK_UROV_VID_DV,

RANG_SMALL_BLOCK_ZOP,

RANG_SMALL_BLOCK_UMIN1,
RANG_SMALL_START_UMIN1,
RANG_SMALL_BLOCK_UMIN2,
RANG_SMALL_START_UMIN2,

RANG_SMALL_BLOCK_UMAX1,
RANG_SMALL_BLOCK_UMAX2,

RANG_SMALL_BLOCK_UP1,

RANG_SMALL_DF1_IN = (RANG_SMALL_BLOCK_UP1 + NUMBER_UP),
RANG_SMALL_DF2_IN,
RANG_SMALL_DF3_IN,
RANG_SMALL_DF4_IN,
RANG_SMALL_DF5_IN,
RANG_SMALL_DF6_IN,
RANG_SMALL_DF7_IN,
RANG_SMALL_DF8_IN,
RANG_SMALL_DF9_IN,
RANG_SMALL_DF10_IN,
RANG_SMALL_DF11_IN,
RANG_SMALL_DF12_IN,
RANG_SMALL_DF13_IN,
RANG_SMALL_DF14_IN,
RANG_SMALL_DF15_IN,
RANG_SMALL_DF16_IN,
RANG_SMALL_DT1_SET,
RANG_SMALL_DT1_RESET,
RANG_SMALL_DT2_SET,
RANG_SMALL_DT2_RESET,
RANG_SMALL_DT3_SET,
RANG_SMALL_DT3_RESET,
RANG_SMALL_DT4_SET,
RANG_SMALL_DT4_RESET,

RANG_SMALL_LF1,
RANG_SMALL_LF2,
RANG_SMALL_LF3,
RANG_SMALL_LF4,
RANG_SMALL_LF5,
RANG_SMALL_LF6,
RANG_SMALL_LF7,
RANG_SMALL_LF8,
RANG_SMALL_LF9,
RANG_SMALL_LF10,
RANG_SMALL_LF11,
RANG_SMALL_LF12,
RANG_SMALL_LF13,
RANG_SMALL_LF14,
RANG_SMALL_LF15,
RANG_SMALL_LF16
//````````````````````````````````````````````````````
//~~~ ADDITIONAL COMMAND     
//....................................................
};

#define NUMBER_GENERAL_SIGNAL_FOR_RANG_SMALL     15
#define NUMBER_DZ_SIGNAL_FOR_RANG_SMALL          11
#define NUMBER_MTZ_SIGNAL_FOR_RANG_SMALL         5
#define NUMBER_ZDZ_SIGNAL_FOR_RANG_SMALL         2
#define NUMBER_ZZ_SIGNAL_FOR_RANG_SMALL          1
#define NUMBER_TZNP_SIGNAL_FOR_RANG_SMALL        3
#define NUMBER_APV_SIGNAL_FOR_RANG_SMALL         1
#define NUMBER_ACHR_CHAPV_SIGNAL_FOR_RANG_SMALL  3
#define NUMBER_UROV_SIGNAL_FOR_RANG_SMALL        1
#define NUMBER_ZOP_SIGNAL_FOR_RANG_SMALL         1
#define NUMBER_UMIN_SIGNAL_FOR_RANG_SMALL        4
#define NUMBER_UMAX_SIGNAL_FOR_RANG_SMALL        2
#define NUMBER_UP_SIGNAL_FOR_RANG_SMALL          NUMBER_UP
#define NUMBER_VMP_SIGNAL_FOR_RANG_SMALL         0
#define NUMBER_EL_SIGNAL_FOR_RANG_SMALL          40

#define NUMBER_TOTAL_SIGNAL_FOR_RANG_SMALL       (                                          \
                                                  NUMBER_GENERAL_SIGNAL_FOR_RANG_SMALL    + \
                                                  NUMBER_DZ_SIGNAL_FOR_RANG_SMALL         + \
                                                  NUMBER_MTZ_SIGNAL_FOR_RANG_SMALL        + \
                                                  NUMBER_ZDZ_SIGNAL_FOR_RANG_SMALL        + \
                                                  NUMBER_ZZ_SIGNAL_FOR_RANG_SMALL         + \
                                                  NUMBER_TZNP_SIGNAL_FOR_RANG_SMALL       + \
                                                  NUMBER_APV_SIGNAL_FOR_RANG_SMALL        + \
                                                  NUMBER_ACHR_CHAPV_SIGNAL_FOR_RANG_SMALL + \
                                                  NUMBER_UROV_SIGNAL_FOR_RANG_SMALL       + \
                                                  NUMBER_ZOP_SIGNAL_FOR_RANG_SMALL        + \
                                                  NUMBER_UMIN_SIGNAL_FOR_RANG_SMALL       + \
                                                  NUMBER_UMAX_SIGNAL_FOR_RANG_SMALL       + \
                                                  NUMBER_UP_SIGNAL_FOR_RANG_SMALL         + \
                                                  NUMBER_VMP_SIGNAL_FOR_RANG_SMALL        + \
                                                  NUMBER_EL_SIGNAL_FOR_RANG_SMALL           \
                                                 ) 



/*****************************************/
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
//                   ~~~    Name Enum DI CMD~~~
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
enum __rang_small_A01 {
RANGE_SMALL_A01_BLOCK_VKL_VVO = 0,
RANGE_SMALL_A01_BLOCK_VKL_VVP,
RANGE_SMALL_A01_RESET_LEDS,
RANGE_SMALL_A01_RESET_RELES,
RANGE_SMALL_A01_MISCEVE_DYSTANCIJNE,
RANGE_SMALL_A01_STATE_VVP,
RANGE_SMALL_A01_STATE_VVO, //RANGE_SMALL_A01_OTKL_VID_ZOVN_ZAHYSTIV,
RANGE_SMALL_A01_VKL_VVO,
RANGE_SMALL_A01_VKL_VVP,
RANGE_SMALL_A01_CTRL_VKL_VVO,
RANGE_SMALL_A01_CTRL_VKL_VVP,
RANGE_SMALL_A01_OTKL_VVO,
RANGE_SMALL_A01_OTKL_VVP,
RANGE_SMALL_A01_CTRL_OTKL_VVO,
RANGE_SMALL_A01_CTRL_OTKL_VVP,

RANGE_SMALL_A01_1_GRUPA_USTAVOK,
RANGE_SMALL_A01_2_GRUPA_USTAVOK,
RANGE_SMALL_A01_3_GRUPA_USTAVOK,
RANGE_SMALL_A01_4_GRUPA_USTAVOK,
RANGE_SMALL_A01_RESET_BLOCK_READY_TU_VID_ZAHYSTIV,  
RANGE_SMALL_A01_NKN_DZO,
RANGE_SMALL_A01_ZBR_BLK_DZO1_I_O_3G,
RANGE_SMALL_A01_ZBR_BLK_DZO1_I_O,
RANGE_SMALL_A01_BLK_DZO1,
    
RANGE_SMALL_A01_BLK_USK_DZO2,
RANGE_SMALL_A01_OP_USK_DZO2,
RANGE_SMALL_A01_ZBR_BLK_DZO2_I_O_3G,
RANGE_SMALL_A01_BLK_DZO2,
RANGE_SMALL_A01_BLK_USK_DZO3,
RANGE_SMALL_A01_OP_USK_DZO3,
RANGE_SMALL_A01_ZBR_BLK_DZO3_I_O_3G,
RANGE_SMALL_A01_BLK_DZO3,
RANGE_SMALL_A01_ZBR_BLK_DZO4_I_O_3G,
RANGE_SMALL_A01_BLK_DZO4,

RANGE_SMALL_A01_BLOCK_ZDZ,
RANGE_SMALL_A01_PUSK_ZDZ_VID_DV,

RANGE_SMALL_A01_BLK_MCZO1,
RANGE_SMALL_A01_BLK_MCZO2,
RANGE_SMALL_A01_BLK_USK_MCZO2,
RANGE_SMALL_A01_BLK_MCZO3,
RANGE_SMALL_A01_BLK_MCZO4,
RANGE_SMALL_A01_BLK_MCZR1,
RANGE_SMALL_A01_BLK_MCZR2,



RANGE_SMALL_A01_STAT_BLK_APV,

RANGE_SMALL_A01_ACHR_CHAPV_VID_DV,
RANGE_SMALL_A01_BLOCK_ACHR1,
RANGE_SMALL_A01_BLOCK_ACHR2,

RANGE_SMALL_A01_PUSK_UROV_VID_DV,

RANGE_SMALL_A01_ZOVN_NESPRN_DZR,
RANGE_SMALL_A01_ZBR_BLK_DZR1_I_O_3G,
RANGE_SMALL_A01_ZBR_BLK_DZR1_I_O,
RANGE_SMALL_A01_BLK_DZR1,
RANGE_SMALL_A01_BLK_USK_DZR2,
RANGE_SMALL_A01_OP_USK_DZR2,
RANGE_SMALL_A01_ZBR_BLK_DZR2_I_O_3G,
RANGE_SMALL_A01_BLK_DZR2,
RANGE_SMALL_A01_BLK_USK_DZR3,
RANGE_SMALL_A01_OP_USK_DZR3,
RANGE_SMALL_A01_ZBR_BLK_DZR3_I_O_3G,
RANGE_SMALL_A01_BLK_DZR3,


RANGE_SMALL_A01_BLOCK_UMIN1,
RANGE_SMALL_A01_START_UMIN1,
RANGE_SMALL_A01_BLOCK_UMIN2,
RANGE_SMALL_A01_START_UMIN2,

RANGE_SMALL_A01_BLOCK_UMAX1,
RANGE_SMALL_A01_BLOCK_UMAX2,

RANGE_SMALL_A01_BLOCK_UP1,

RANGE_SMALL_A01_DF1_IN = (RANGE_SMALL_A01_BLOCK_UP1 + NUMBER_UP),
RANGE_SMALL_A01_DF1_RST,
RANGE_SMALL_A01_DF2_IN,
RANGE_SMALL_A01_DF2_RST,
RANGE_SMALL_A01_DF3_IN,
RANGE_SMALL_A01_DF3_RST,
RANGE_SMALL_A01_DF4_IN,
RANGE_SMALL_A01_DF4_RST,
RANGE_SMALL_A01_DF5_IN,
RANGE_SMALL_A01_DF5_RST,
RANGE_SMALL_A01_DF6_IN,
RANGE_SMALL_A01_DF6_RST,
RANGE_SMALL_A01_DF7_IN,
RANGE_SMALL_A01_DF7_RST,
RANGE_SMALL_A01_DF8_IN,
RANGE_SMALL_A01_DF8_RST,
RANGE_SMALL_A01_DF9_IN,
RANGE_SMALL_A01_DF9_RST,
RANGE_SMALL_A01_DF10_IN,
RANGE_SMALL_A01_DF10_RST,
RANGE_SMALL_A01_DF11_IN,
RANGE_SMALL_A01_DF11_RST,
RANGE_SMALL_A01_DF12_IN,
RANGE_SMALL_A01_DF12_RST,
RANGE_SMALL_A01_DF13_IN,
RANGE_SMALL_A01_DF13_RST,
RANGE_SMALL_A01_DF14_IN,
RANGE_SMALL_A01_DF14_RST,
RANGE_SMALL_A01_DF15_IN,
RANGE_SMALL_A01_DF15_RST,
RANGE_SMALL_A01_DF16_IN,
RANGE_SMALL_A01_DF16_RST,
RANGE_SMALL_A01_DT1_SET,
RANGE_SMALL_A01_DT1_RESET,
RANGE_SMALL_A01_DT2_SET,
RANGE_SMALL_A01_DT2_RESET,
RANGE_SMALL_A01_DT3_SET,
RANGE_SMALL_A01_DT3_RESET,
RANGE_SMALL_A01_DT4_SET,
RANGE_SMALL_A01_DT4_RESET,

RANG_SMALL_A01_LF1,
RANG_SMALL_A01_LF2,
RANG_SMALL_A01_LF3,
RANG_SMALL_A01_LF4,
RANG_SMALL_A01_LF5,
RANG_SMALL_A01_LF6,
RANG_SMALL_A01_LF7,
RANG_SMALL_A01_LF8,
RANG_SMALL_A01_LF9,
RANG_SMALL_A01_LF10,
RANG_SMALL_A01_LF11,
RANG_SMALL_A01_LF12,
RANG_SMALL_A01_LF13,
RANG_SMALL_A01_LF14,
RANG_SMALL_A01_LF15,
RANG_SMALL_A01_LF16,
TOTAL_SIGNAL_FOR_RANG_SMALL_A01,
TOTAL_GENERAL_SIGNAL_FOR_RANG_SMALL = (RANGE_SMALL_A01_NKN_DZO - RANGE_SMALL_A01_BLOCK_VKL_VVO),
TOTAL_DZO_SIGNAL_FOR_RANG_SMALL  = (RANGE_SMALL_A01_BLOCK_ZDZ - RANGE_SMALL_A01_NKN_DZO),
TOTAL_DZR_SIGNAL_FOR_RANG_SMALL  = (RANGE_SMALL_A01_BLOCK_UMIN1 - RANGE_SMALL_A01_ZOVN_NESPRN_DZR),
TOTAL_ZDZ_SIGNAL_FOR_RANG_SMALL  = (RANGE_SMALL_A01_BLK_MCZO1 - RANGE_SMALL_A01_BLOCK_ZDZ ),
TOTAL_MCZO_SIGNAL_FOR_RANG_SMALL = (RANGE_SMALL_A01_BLK_MCZR1 - RANGE_SMALL_A01_BLK_MCZO1 ),
TOTAL_MCZR_SIGNAL_FOR_RANG_SMALL = (RANGE_SMALL_A01_STAT_BLK_APV - RANGE_SMALL_A01_BLK_MCZR1),
TOTAL_APV_SIGNAL_FOR_RANG_SMALL  = (RANGE_SMALL_A01_ACHR_CHAPV_VID_DV-RANGE_SMALL_A01_STAT_BLK_APV),
TOTAL_ACHR_SIGNAL_FOR_RANG_SMALL = (RANGE_SMALL_A01_PUSK_UROV_VID_DV- RANGE_SMALL_A01_ACHR_CHAPV_VID_DV),

TOTAL_UROV_SIGNAL_FOR_RANG_SMALL = (RANGE_SMALL_A01_ZOVN_NESPRN_DZR-RANGE_SMALL_A01_PUSK_UROV_VID_DV),
TOTAL_UMIN_SIGNAL_FOR_RANG_SMALL = (RANGE_SMALL_A01_BLOCK_UMAX1-RANGE_SMALL_A01_BLOCK_UMIN1),
TOTAL_UMAX_SIGNAL_FOR_RANG_SMALL = (RANGE_SMALL_A01_BLOCK_UP1-RANGE_SMALL_A01_BLOCK_UMAX1),
TOTAL_UP_SIGNAL_FOR_RANG_SMALL = (RANGE_SMALL_A01_DF1_IN-RANGE_SMALL_A01_BLOCK_UP1),
TOTAL_EL_SIGNAL_FOR_RANG_SMALL = (TOTAL_SIGNAL_FOR_RANG_SMALL_A01 - RANGE_SMALL_A01_DF1_IN),//16 

N_SML_REMAINDER   = ((TOTAL_SIGNAL_FOR_RANG_SMALL_A01&0x1f)!= 0),
N_SML = (  ((TOTAL_SIGNAL_FOR_RANG_SMALL_A01>>5)+N_SML_REMAINDER)),

TOTAL_MTZ_STUB_SIGNAL_FOR_RANG_SMALL = 0 
};

//~~~   
//..................................................................................
//"""""

/*****************************************/
//Константи для ранжування дискретних виходів-свтодіодів-О-функцій-реєстраторів
/*****************************************/
enum __rang_output_led_df_reg 
{
RANG_BLOCK_VKL_VV = 0,
RANG_RESET_LEDS,
RANG_RESET_RELES,
RANG_MISCEVE_DYSTANCIJNE,
RANG_STATE_VV,
RANG_OTKL_VID_ZOVN_ZAHYSTIV,
RANG_VKL_VV,
RANG_CTRL_VKL,
RANG_OTKL_VV,
RANG_CTRL_OTKL,
RANG_PRYVID_VV,
RANG_PEREVYSHCHENNJA_Inom_VYMK,
RANG_KRYTYCHNYJ_RESURS_VYMYKACHA,
RANG_VYCHERPANYJ_RESURS_VYMYKACHA,
RANG_DEFECT,
RANG_AVAR_DEFECT,
RANG_WORK_A_REJESTRATOR,
RANG_WORK_D_REJESTRATOR,
RANG_VIDKL_VID_ZAKHYSTIV,
RANG_WORK_BO,
RANG_WORK_BV,
RANG_1KZ,
RANG_2KZ,
RANG_3KZ,
RANG_1_GRUPA_USTAVOK,
RANG_2_GRUPA_USTAVOK,
RANG_3_GRUPA_USTAVOK,
RANG_4_GRUPA_USTAVOK,
RANG_INVERS_DV_GRUPA_USTAVOK,
RANG_BLK_GRUP_USTAVOK_VID_ZACHYSTIV,
RANG_RESET_BLOCK_READY_TU_VID_ZAHYSTIV,
RANG_READY_TU,
RANG_SETTINGS_CHANGED,
RANG_NKNO,
RANG_NKNR,
RANG_BLOCK_DZ1,
RANG_PO_DZ1,
RANG_DZ1,
RANG_PO_AMTZ_DZ1,
RANG_AMTZ_DZ1,
RANG_BLOCK_DZ2,
RANG_BLOCK_PR_DZ2,
RANG_OP_PR_DZ2,
RANG_SECTOR_DIR_DZ2,
RANG_SECTOR_INV_DZ2,
RANG_PO_DIR_DZ2,
RANG_PO_INV_DZ2,
RANG_DZ2,
RANG_PO_AMTZ_DZ2,
RANG_AMTZ_DZ2,
RANG_BLOCK_DZ3,
RANG_BLOCK_PR_DZ3,
RANG_OP_PR_DZ3,
RANG_SECTOR_DIR_DZ3,
RANG_SECTOR_INV_DZ3,
RANG_PO_DIR_DZ3,
RANG_PO_INV_DZ3,
RANG_DZ3,
RANG_PO_AMTZ_DZ3,
RANG_AMTZ_DZ3,
RANG_BLOCK_DZ4,
RANG_BLOCK_PR_DZ4,
RANG_OP_PR_DZ4,
RANG_SECTOR_DIR_DZ4,
RANG_SECTOR_INV_DZ4,
RANG_PO_DIR_DZ4,
RANG_PO_INV_DZ4,
RANG_DZ4,
RANG_PO_AMTZ_DZ4,
RANG_AMTZ_DZ4,
RANG_EXT_NKN_DZ,
RANG_NKN_DZ,
RANG_PO_U_DZ,
RANG_PO_I_BLK_DZ,
RANG_3F_DZ_DIR_INV,
RANG_SNKN_DZ,

RANG_BLOCK_MTZ1,
RANG_BLOCK_MTZ2,
RANG_BLOCK_USK_MTZ2,
RANG_BLOCK_MTZ3,
RANG_BLOCK_MTZ4,
RANG_SECTOR_VPERED_MTZN1,
RANG_SECTOR_NAZAD_MTZN1,
RANG_PO_MTZ1,
RANG_PO_MTZN1_VPERED,
RANG_PO_MTZN1_NAZAD,
RANG_PO_U_MTZPN1,
RANG_PO_MTZPN1,
RANG_MTZ1,
RANG_SECTOR_VPERED_MTZN2,
RANG_SECTOR_NAZAD_MTZN2,
RANG_PO_MTZ2,
RANG_PO_MTZN2_VPERED,
RANG_PO_MTZN2_NAZAD,
RANG_PO_U_MTZPN2,
RANG_PO_MTZPN2,
RANG_MTZ2,
RANG_SECTOR_VPERED_MTZN3,
RANG_SECTOR_NAZAD_MTZN3,
RANG_PO_MTZ3,
RANG_PO_MTZN3_VPERED,
RANG_PO_MTZN3_NAZAD,
RANG_PO_U_MTZPN3,
RANG_PO_MTZPN3,
RANG_MTZ3,
RANG_SECTOR_VPERED_MTZN4,
RANG_SECTOR_NAZAD_MTZN4,
RANG_PO_MTZ4,
RANG_PO_MTZN4_VPERED,
RANG_PO_MTZN4_NAZAD,
RANG_PO_U_MTZPN4,
RANG_PO_MTZPN4,
RANG_MTZ4,
RANG_PO_BLOCK_U_MTZN,
RANG_NCN_MTZ,

RANG_BLOCK_ZDZ,
RANG_PUSK_ZDZ_VID_DV,
RANG_LIGHT_ZDZ_FROM_DV,
RANG_PO_ZDZ,
RANG_ZDZ,

RANG_BLOCK_NZZ,
RANG_PO_NZZ,
RANG_NZZ,
RANG_PO_3I0,
RANG_3I0,
RANG_PO_3U0,
RANG_3U0,
RANG_SECTOR_NZZ,

RANG_BLOCK_TZNP1,
RANG_SECTOR_TZNP1_VPERED,
RANG_SECTOR_TZNP1_NAZAD,
RANG_PO_3I0_TZNP1_VPERED,
RANG_PO_3I0_TZNP1_NAZAD,
RANG_PO_3U0_TZNP1_VPERED,
RANG_PO_3U0_TZNP1_NAZAD,
RANG_PO_TZNP1_VPERED,
RANG_PO_TZNP1_NAZAD,
RANG_TZNP1,
RANG_BLOCK_TZNP2,
RANG_SECTOR_TZNP2_VPERED,
RANG_SECTOR_TZNP2_NAZAD,
RANG_PO_3I0_TZNP2_VPERED,
RANG_PO_3I0_TZNP2_NAZAD,
RANG_PO_3U0_TZNP2_VPERED,
RANG_PO_3U0_TZNP2_NAZAD,
RANG_PO_TZNP2_VPERED,
RANG_PO_TZNP2_NAZAD,
RANG_TZNP2,
RANG_BLOCK_TZNP3,
RANG_SECTOR_TZNP3_VPERED,
RANG_SECTOR_TZNP3_NAZAD,
RANG_PO_3I0_TZNP3_VPERED,
RANG_PO_3I0_TZNP3_NAZAD,
RANG_PO_3U0_TZNP3_VPERED,
RANG_PO_3U0_TZNP3_NAZAD,
RANG_PO_TZNP3_VPERED,
RANG_PO_TZNP3_NAZAD,
RANG_TZNP3,

RANG_STAT_BLK_APV,
RANG_APV1,
RANG_APV2,
RANG_APV3,
RANG_APV4,
RANG_APV_WORK,

RANG_ACHR_CHAPV_VID_DV,
RANG_BLOCK_ACHR1,
RANG_BLOCK_ACHR2,
RANG_RAZR_CHAPV,
RANG_VN_BLOCK_CHAPV,
RANG_PO_ACHR1,
RANG_PO_CHAPV1,
RANG_ACHR_CHAPV1,
RANG_PO_ACHR2,
RANG_PO_CHAPV2,
RANG_ACHR_CHAPV2,

RANG_PUSK_UROV_VID_DV,
RANG_PO_UROV,
RANG_UROV1,
RANG_UROV2,

RANG_BLOCK_ZOP,
RANG_PO_ZOP,
RANG_ZOP,

RANG_BLOCK_UMIN1,
RANG_START_UMIN1,
RANG_BLOCK_UMIN2,
RANG_START_UMIN2,
RANG_PO_UMIN1,
RANG_PO_UBLK_UMIN1,
RANG_PO_IBLK_UMIN1,
RANG_UMIN1,
RANG_PO_UMIN2,
RANG_PO_UBLK_UMIN2,
RANG_PO_IBLK_UMIN2,
RANG_UMIN2,

RANG_BLOCK_UMAX1,
RANG_PO_UMAX1,
RANG_UMAX1,
RANG_BLOCK_UMAX2,
RANG_PO_UMAX2,
RANG_UMAX2,

RANG_BLOCK_UP1,
RANG_PO_UP1,
RANG_UP1,

RANG_DF1_IN = (RANG_BLOCK_UP1 + 3*NUMBER_UP),
RANG_DF1_OUT,
RANG_DF2_IN,
RANG_DF2_OUT,
RANG_DF3_IN,
RANG_DF3_OUT,
RANG_DF4_IN,
RANG_DF4_OUT,
RANG_DF5_IN,
RANG_DF5_OUT,
RANG_DF6_IN,
RANG_DF6_OUT,
RANG_DF7_IN,
RANG_DF7_OUT,
RANG_DF8_IN,
RANG_DF8_OUT,
RANG_DF9_IN,
RANG_DF9_OUT,
RANG_DF10_IN,
RANG_DF10_OUT,
RANG_DF11_IN,
RANG_DF11_OUT,
RANG_DF12_IN,
RANG_DF12_OUT,
RANG_DF13_IN,
RANG_DF13_OUT,
RANG_DF14_IN,
RANG_DF14_OUT,
RANG_DF15_IN,
RANG_DF15_OUT,
RANG_DF16_IN,
RANG_DF16_OUT,
RANG_DT1_SET,
RANG_DT1_RESET,
RANG_DT1_OUT,
RANG_DT2_SET,
RANG_DT2_RESET,
RANG_DT2_OUT,
RANG_DT3_SET,
RANG_DT3_RESET,
RANG_DT3_OUT,
RANG_DT4_SET,
RANG_DT4_RESET,
RANG_DT4_OUT,
RANG_D_AND1,
RANG_D_AND2,
RANG_D_AND3,
RANG_D_AND4,
RANG_D_AND5,
RANG_D_AND6,
RANG_D_AND7,
RANG_D_AND8,
RANG_D_OR1,
RANG_D_OR2,
RANG_D_OR3,
RANG_D_OR4,
RANG_D_OR5,
RANG_D_OR6,
RANG_D_OR7,
RANG_D_OR8,
RANG_D_XOR1,
RANG_D_XOR2,
RANG_D_XOR3,
RANG_D_XOR4,
RANG_D_XOR5,
RANG_D_XOR6,
RANG_D_XOR7,
RANG_D_XOR8,
RANG_D_NOT1,
RANG_D_NOT2,
RANG_D_NOT3,
RANG_D_NOT4,
RANG_D_NOT5,
RANG_D_NOT6,
RANG_D_NOT7,
RANG_D_NOT8,
RANG_D_NOT9,
RANG_D_NOT10,
RANG_D_NOT11,
RANG_D_NOT12,
RANG_D_NOT13,
RANG_D_NOT14,
RANG_D_NOT15,
RANG_D_NOT16,
RANG_LF1,
RANG_LF2,
RANG_LF3,
RANG_LF4,
RANG_LF5,
RANG_LF6,
RANG_LF7,
RANG_LF8,
RANG_LF9,
RANG_LF10,
RANG_LF11,
RANG_LF12,
RANG_LF13,
RANG_LF14,
RANG_LF15,
RANG_LF16,
RANG_ERROR_CONF_EL
};

#define NUMBER_GENERAL_SIGNAL_FOR_RANG     33
#define NUMBER_DZ_SIGNAL_FOR_RANG          41
#define NUMBER_MTZ_SIGNAL_FOR_RANG         39
#define NUMBER_ZDZ_SIGNAL_FOR_RANG         5
#define NUMBER_ZZ_SIGNAL_FOR_RANG          8
#define NUMBER_TZNP_SIGNAL_FOR_RANG        30
#define NUMBER_APV_SIGNAL_FOR_RANG         6
#define NUMBER_ACHR_CHAPV_SIGNAL_FOR_RANG  11
#define NUMBER_UROV_SIGNAL_FOR_RANG        4
#define NUMBER_ZOP_SIGNAL_FOR_RANG         3
#define NUMBER_UMIN_SIGNAL_FOR_RANG        12
#define NUMBER_UMAX_SIGNAL_FOR_RANG        6
#define NUMBER_UP_SIGNAL_FOR_RANG          (3*NUMBER_UP)
#define NUMBER_VMP_SIGNAL_FOR_RANG         0
#define NUMBER_EL_SIGNAL_FOR_RANG          101

#define NUMBER_TOTAL_SIGNAL_FOR_RANG       (                                    \
                                            NUMBER_GENERAL_SIGNAL_FOR_RANG    + \
                                            NUMBER_DZ_SIGNAL_FOR_RANG         + \
                                            NUMBER_MTZ_SIGNAL_FOR_RANG        + \
                                            NUMBER_ZDZ_SIGNAL_FOR_RANG        + \
                                            NUMBER_ZZ_SIGNAL_FOR_RANG         + \
                                            NUMBER_TZNP_SIGNAL_FOR_RANG       + \
                                            NUMBER_APV_SIGNAL_FOR_RANG        + \
                                            NUMBER_ACHR_CHAPV_SIGNAL_FOR_RANG + \
                                            NUMBER_UROV_SIGNAL_FOR_RANG       + \
                                            NUMBER_ZOP_SIGNAL_FOR_RANG        + \
                                            NUMBER_UMIN_SIGNAL_FOR_RANG       + \
                                            NUMBER_UMAX_SIGNAL_FOR_RANG       + \
                                            NUMBER_UP_SIGNAL_FOR_RANG         + \
                                            NUMBER_VMP_SIGNAL_FOR_RANG        + \
                                            NUMBER_EL_SIGNAL_FOR_RANG           \
                                           ) 

/*****************************************/
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//``````````````````````````````````````````````````````````````````````````````````
//                   ~~~    Name Enum DO CMD~~~
//..................................................................................
//""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
enum __rang_output_led_df_reg_A01 {

RNG_BIG_BLOCK_VKL_VVO = 0,
RNG_BIG_BLOCK_VKL_VVP,
RNG_BIG_RESET_LEDS,
RNG_BIG_RESET_RELES,
RNG_BIG_MISCEVE_DYSTANCIJNE,
RNG_BIG_STATE_VVR,
RNG_BIG_STATE_VVO,//RNG_BIG_OTKL_VID_ZOVN_ZAHYSTIV,???
RNG_BIG_VKL_VVO,
RNG_BIG_VKL_VVR,
RNG_BIG_CTRL_VKL_VVO,
RNG_BIG_CTRL_VKL_VVR,
RNG_BIG_OTKL_VV_VVO,
RNG_BIG_OTKL_VV_VVR,
RNG_BIG_CTRL_OTKL_VVO,
RNG_BIG_CTRL_OTKL_VVR,
RNG_BIG_PRYVID_VVO,
RNG_BIG_PRYVID_VVR,
RNG_BIG_NKNO,
RNG_BIG_NKNR,
RNG_BIG_PEREVYSHCHENNJA_I_NOM_VYMK,
RNG_BIG_KRYTYCHNYJ_RESURS_VVO,
RNG_BIG_VYCHERPANYJ_RESURS_VVO,
RNG_BIG_DEFECT,
RNG_BIG_AVAR_DEFECT,
RNG_BIG_WORK_A_REJESTRATOR,
RNG_BIG_WORK_D_REJESTRATOR,
RNG_BIG_VIDKL_VID_ZAKHYSTIV_VVO,
RNG_BIG_VIDKL_VID_ZAKHYSTIV_VVR,
RNG_BIG_WORK_BO_VVO,
RNG_BIG_WORK_BO_VVR,
RNG_BIG_WORK_BV_VVO,
RNG_BIG_WORK_BV_VVR,

RNG_BIG_1_GRUPA_USTAVOK,
RNG_BIG_2_GRUPA_USTAVOK,
RNG_BIG_3_GRUPA_USTAVOK,
RNG_BIG_4_GRUPA_USTAVOK,
RNG_BIG_INVERS_DV_GRUPA_USTAVOK,
RNG_BIG_BLK_GRUP_USTAVOK_VID_ZACHYSTIV,
RNG_BIG_RESET_BLOCK_READY_TU_VID_ZAHYSTIV,
RNG_BIG_READY_TU,
RNG_BIG_SETTINGS_CHANGED,

RNG_BIG_ZVN_NESPR_DZO,
RNG_BIG_ZBR_BLOCK_DZO1_I_O_3G,
RNG_BIG_ZBR_BLOCK_DZO1_I_O,
RNG_BIG_BLOCK_DZO1,
RNG_BIG_I_BLK_DZO_I_LESS_IP_0_P_5,
RNG_BIG_I_O3G_DIV_I_O1G_DZO,
RNG_BIG_BLK_DZO1_I_O3G_DIV_I_O1G_DZO,
RNG_BIG_BLK_DZO1_I_OSN,
RNG_BIG_NKN_DZO,
RNG_BIG_CNKN_DZO,
RNG_BIG_U_DZO_U_O_LESS_UP_0_25P_UN,
RNG_BIG_PO2_I_BLK_DZO,//<-PO2 DZO1
RNG_BIG_BLK_DZO1,
RNG_BIG_PO_DZO1,
RNG_BIG_DZO1,
RNG_BIG_PO_AMCZ_DZO1,
RNG_BIG_AMCZ_DZO1,
RNG_BIG_BLOCK_PR_DZO2,
RNG_BIG_OP_PR_DZO2,
RNG_BIG_ZBR_BLOCK_DZO2_I_O_3G,
RNG_BIG_BLOCK_DZO2,
RNG_BIG_BLK_DZO2_I_OSN_3G_DIV_1G,
RNG_BIG_BLK_DZO2,
RNG_BIG_SECTOR_DIR_DZO2,
RNG_BIG_SECTOR_INV_DZO2,
RNG_BIG_PO_DIR_DZO2,
RNG_BIG_PO_INV_DZO2,
RNG_BIG_DZO2,

RNG_BIG_AMCZ_DZO2, RNG_BIG_PO_AMCZ_DZO2,

RNG_BIG_BLOCK_PR_DZO3,
RNG_BIG_OP_PR_DZO3,
RNG_BIG_ZBR_BLOCK_DZO3_I_O_3G,
RNG_BIG_BLOCK_DZO3,
RNG_BIG_BLK_DZO3_I_OSN_3G_DIV_1G,
RNG_BIG_BLK_DZO3,
RNG_BIG_SECTOR_DIR_DZO3,
RNG_BIG_SECTOR_INV_DZO3,
RNG_BIG_PO_DIR_DZO3,
RNG_BIG_PO_INV_DZO3,
RNG_BIG_DZO3,

RNG_BIG_AMCZ_DZO3,RNG_BIG_PO_AMCZ_DZO3,

RNG_BIG_ZBR_BLOCK_DZO4_I_O_3G,
RNG_BIG_BLOCK_DZO4,
RNG_BIG_BLK_DZO4_I_OSN_3G_DIV_1G,
RNG_BIG_BLK_DZO4,
RNG_BIG_NAPRYM_DIR_DZO4,
RNG_BIG_NAPRYM_INV_DZO4,
RNG_BIG_PO_DIR_DZO4,
RNG_BIG_PO_INV_DZO4,
RNG_BIG_DZO4,

RNG_BIG_AMCZ_DZO4,RNG_BIG_PO_AMCZ_DZO4,


RNG_BIG_BLOCK_ZDZ,
RNG_BIG_PUSK_ZDZ_VID_DV,
RNG_BIG_LIGHT_ZDZ_FROM_DV,
RNG_BIG_LIGHT_ZDZ_FROM_OVD1,
RNG_BIG_LIGHT_ZDZ_FROM_OVD2,
RNG_BIG_LIGHT_ZDZ_FROM_OVD3,
RNG_BIG_PO_ZDZ,
RNG_BIG_ZDZ,

RNG_BIG_NCN_MCZO,RNG_BIG_PO_BLK_U_OSN_LESS_0_05UN_MCZO,
RNG_BIG_BLOCK_MCZO1,
RNG_BIG_NCN_MCZO1,
RNG_BIG_PO_BLK_U_OSN_LESS_UST_MCZO1,
RNG_BIG_SECTOR_VPERED_MCZON1,
RNG_BIG_SECTOR_NAZAD_MCZON1,
RNG_BIG_PO_MCZO1,
RNG_BIG_PO_MCZON1_VPERED,
RNG_BIG_PO_MCZON1_NAZAD,
RNG_BIG_PO_MCZOPN1,
RNG_BIG_MCZO1,

RNG_BIG_BLOCK_MCZO2,RNG_BIG_BLOCK_PR_MCZO2,
RNG_BIG_NCN_MCZO2,RNG_BIG_PO_BLK_U_OSN_LESS_UST_MCZO2,
RNG_BIG_SECTOR_VPERED_MCZON2,
RNG_BIG_SECTOR_NAZAD_MCZON2,
RNG_BIG_PO_MCZO2,
RNG_BIG_PO_MCZON2_VPERED,
RNG_BIG_PO_MCZON2_NAZAD,
RNG_BIG_PO_MCZOPN2,
RNG_BIG_MCZO2,

RNG_BIG_BLOCK_MCZO3,
RNG_BIG_NCN_MCZO3,RNG_BIG_PO_BLK_U_OSN_LESS_UST_MCZO3,
RNG_BIG_SECTOR_VPERED_MCZON3,
RNG_BIG_SECTOR_NAZAD_MCZON3,
RNG_BIG_PO_MCZO3,
RNG_BIG_PO_MCZON3_VPERED,
RNG_BIG_PO_MCZON3_NAZAD,
RNG_BIG_PO_MCZOPN3,
RNG_BIG_MCZO3,

RNG_BIG_BLOCK_MCZO4,
RNG_BIG_NCN_MCZO4,RNG_BIG_PO_BLK_U_OSN_LESS_UST_MCZO4,
RNG_BIG_SECTOR_VPERED_MCZON4,
RNG_BIG_SECTOR_NAZAD_MCZON4,
RNG_BIG_PO_MCZO4,
RNG_BIG_PO_MCZON4_VPERED,
RNG_BIG_PO_MCZON4_NAZAD,
RNG_BIG_PO_MCZOPN4,
RNG_BIG_MCZO4,

RNG_BIG_NCN_MCZR,RNG_BIG_PO_BLK_U_RSV_LESS_UN,
RNG_BIG_BLOCK_MCZR1,
RNG_BIG_NCN_MCZR1,RNG_BIG_PO_BLK_U_RSV_LESS_UST_MCZR1,
RNG_BIG_SECTOR_VPERED_MCZRN1,
RNG_BIG_SECTOR_NAZAD_MCZRN1,
RNG_BIG_PO_MCZR1,
RNG_BIG_PO_MCZRN1_VPERED,
RNG_BIG_PO_MCZRN1_NAZAD,
RNG_BIG_PO_MCZRPN1,
RNG_BIG_MCZR1,

RNG_BIG_BLOCK_MCZR2,
RNG_BIG_NCN_MCZR2,RNG_BIG_PO_BLK_U_RSV_LESS_UST_MCZR2,
RNG_BIG_SECTOR_VPERED_MCZRN2,
RNG_BIG_SECTOR_NAZAD_MCZRN2,
RNG_BIG_PO_MCZR2,
RNG_BIG_PO_MCZRN2_VPERED,
RNG_BIG_PO_MCZRN2_NAZAD,
RNG_BIG_PO_MCZRPN2,
RNG_BIG_MCZR2,

RNG_BIG_STAT_BLK_APV,
RNG_BIG_APV1,
RNG_BIG_APV2,
RNG_BIG_APV3,
RNG_BIG_APV4,
RNG_BIG_APV_WORK,

RNG_BIG_ACHR_CHAPV_VID_DV,
RNG_BIG_BLOCK_ACHR1,
RNG_BIG_BLOCK_ACHR2,
RNG_BIG_RAZR_CHAPV,
RNG_BIG_VN_BLOCK_CHAPV,
RNG_BIG_PO_ACHR1,
RNG_BIG_PO_CHAPV1,
RNG_BIG_ACHR_CHAPV1,
RNG_BIG_PO_ACHR2,
RNG_BIG_PO_CHAPV2,
RNG_BIG_ACHR_CHAPV2,

RNG_BIG_PUSK_UROV_VID_DV,
RNG_BIG_PO_UROV,
RNG_BIG_UROV1,
RNG_BIG_UROV2,
RNG_BIG_ZVN_NESPR_DZR,
RNG_BIG_ZBR_BLOCK_DZR1_I_R_3G,
RNG_BIG_ZBR_BLOCK_DZR1_I_R,
RNG_BIG_BLOCK_DZR1,
RNG_BIG_I_BLK_DZR_I_LESS_0_P_5A,
RNG_BIG_I_RSV_3G_DIV_1G_DZR,
RNG_BIG_BLK_DZR1_I_RSV_3G_DIV_1G_DZR,//
RNG_BIG_BLK_DZR1_I_RSV,

RNG_BIG_NKN_DZR,
RNG_BIG_CNKN_DZR,
RNG_BIG_U_DZR_U_RSV_LESS_0_25P_UN,
RNG_BIG_PO2_I_BLK_DZR1,
RNG_BIG_BLK_DZR1,
RNG_BIG_PO_DZR1,
RNG_BIG_DZR1,
RNG_BIG_PO_AMCZ_DZR1,
RNG_BIG_AMCZ_DZR1,

RNG_BIG_BLOCK_PR_DZR2,
RNG_BIG_OP_PR_DZR2,
RNG_BIG_ZBR_BLOCK_DZR2_I_R_3G,
RNG_BIG_BLOCK_DZR2,
RNG_BIG_BLK_DZR2_I_RSV_3G_DIV_1G,
RNG_BIG_BLK_DZR2,
RNG_BIG_SECTOR_DIR_DZR2,
RNG_BIG_SECTOR_INV_DZR2,
RNG_BIG_PO_DIR_DZR2,
RNG_BIG_PO_INV_DZR2,
RNG_BIG_DZR2,
RNG_BIG_AMCZ_DZR2,
RNG_BIG_PO_AMCZ_DZR2,

RNG_BIG_BLOCK_PR_DZR3,
RNG_BIG_OP_PR_DZR3,
RNG_BIG_ZBR_BLOCK_DZR3_I_R_3G,
RNG_BIG_BLOCK_DZR3,
RNG_BIG_BLK_DZR3_I_RSV_3G_DIV_1G,
RNG_BIG_BLK_DZR3,
RNG_BIG_SECTOR_DIR_DZR3,
RNG_BIG_SECTOR_INV_DZR3,
RNG_BIG_PO_DIR_DZR3,
RNG_BIG_PO_INV_DZR3,
RNG_BIG_DZR3,
RNG_BIG_AMCZ_DZR3,
RNG_BIG_PO_AMCZ_DZR3,

RNG_BIG_BLOCK_UMIN1,
RNG_BIG_START_UMIN1,
RNG_BIG_BLOCK_UMIN2,
RNG_BIG_START_UMIN2,
RNG_BIG_PO_UMIN1,
RNG_BIG_PO_UBLK_UMIN1,
RNG_BIG_PO_IBLK_UMIN1,
RNG_BIG_UMIN1,
RNG_BIG_PO_UMIN2,
RNG_BIG_PO_UBLK_UMIN2,
RNG_BIG_PO_IBLK_UMIN2,
RNG_BIG_UMIN2,

RNG_BIG_BLOCK_UMAX1,
RNG_BIG_PO_UMAX1,
RNG_BIG_UMAX1,
RNG_BIG_BLOCK_UMAX2,
RNG_BIG_PO_UMAX2,
RNG_BIG_UMAX2,

RNG_BIG_BLOCK_UP1,
RNG_BIG_PO_UP1,
RNG_BIG_UP1,
RNG_BIG_DF1_IN = (RNG_BIG_BLOCK_UP1 + 3*NUMBER_UP),
RNG_BIG_DF1_RST, 
RNG_BIG_DF1_OUT,
RNG_BIG_DF2_IN,
RNG_BIG_DF2_RST,
RNG_BIG_DF2_OUT,
RNG_BIG_DF3_IN,
RNG_BIG_DF3_RST,
RNG_BIG_DF3_OUT,
RNG_BIG_DF4_IN,
RNG_BIG_DF4_RST,
RNG_BIG_DF4_OUT,
RNG_BIG_DF5_IN,
RNG_BIG_DF5_RST,
RNG_BIG_DF5_OUT,
RNG_BIG_DF6_IN,
RNG_BIG_DF6_RST,
RNG_BIG_DF6_OUT,
RNG_BIG_DF7_IN,
RNG_BIG_DF7_RST,
RNG_BIG_DF7_OUT,
RNG_BIG_DF8_IN,
RNG_BIG_DF8_RST,
RNG_BIG_DF8_OUT,
RNG_BIG_DF9_IN,
RNG_BIG_DF9_RST,
RNG_BIG_DF9_OUT,
RNG_BIG_DF10_IN,
RNG_BIG_DF10_RST,
RNG_BIG_DF10_OUT,
RNG_BIG_DF11_IN,
RNG_BIG_DF11_RST,
RNG_BIG_DF11_OUT,
RNG_BIG_DF12_IN,
RNG_BIG_DF12_RST,
RNG_BIG_DF12_OUT,
RNG_BIG_DF13_IN,
RNG_BIG_DF13_RST,
RNG_BIG_DF13_OUT,
RNG_BIG_DF14_IN,
RNG_BIG_DF14_RST,
RNG_BIG_DF14_OUT,
RNG_BIG_DF15_IN,
RNG_BIG_DF15_RST,
RNG_BIG_DF15_OUT,
RNG_BIG_DF16_IN,
RNG_BIG_DF16_RST,
RNG_BIG_DF16_OUT,
RNG_BIG_DT1_SET,
RNG_BIG_DT1_RESET,
RNG_BIG_DT1_OUT,
RNG_BIG_DT2_SET,
RNG_BIG_DT2_RESET,
RNG_BIG_DT2_OUT,
RNG_BIG_DT3_SET,
RNG_BIG_DT3_RESET,
RNG_BIG_DT3_OUT,
RNG_BIG_DT4_SET,
RNG_BIG_DT4_RESET,
RNG_BIG_DT4_OUT,
RNG_BIG_D_AND1,
RNG_BIG_D_AND2,
RNG_BIG_D_AND3,
RNG_BIG_D_AND4,
RNG_BIG_D_AND5,
RNG_BIG_D_AND6,
RNG_BIG_D_AND7,
RNG_BIG_D_AND8,
RNG_BIG_D_OR1,
RNG_BIG_D_OR2,
RNG_BIG_D_OR3,
RNG_BIG_D_OR4,
RNG_BIG_D_OR5,
RNG_BIG_D_OR6,
RNG_BIG_D_OR7,
RNG_BIG_D_OR8,
RNG_BIG_D_XOR1,
RNG_BIG_D_XOR2,
RNG_BIG_D_XOR3,
RNG_BIG_D_XOR4,
RNG_BIG_D_XOR5,
RNG_BIG_D_XOR6,
RNG_BIG_D_XOR7,
RNG_BIG_D_XOR8,
RNG_BIG_D_NOT1,
RNG_BIG_D_NOT2,
RNG_BIG_D_NOT3,
RNG_BIG_D_NOT4,
RNG_BIG_D_NOT5,
RNG_BIG_D_NOT6,
RNG_BIG_D_NOT7,
RNG_BIG_D_NOT8,
RNG_BIG_D_NOT9,
RNG_BIG_D_NOT10,
RNG_BIG_D_NOT11,
RNG_BIG_D_NOT12,
RNG_BIG_D_NOT13,
RNG_BIG_D_NOT14,
RNG_BIG_D_NOT15,
RNG_BIG_D_NOT16,
RNG_BIG_LF1,
RNG_BIG_LF2,
RNG_BIG_LF3,
RNG_BIG_LF4,
RNG_BIG_LF5,
RNG_BIG_LF6,
RNG_BIG_LF7,
RNG_BIG_LF8,
RNG_BIG_LF9,
RNG_BIG_LF10,
RNG_BIG_LF11,
RNG_BIG_LF12,
RNG_BIG_LF13,
RNG_BIG_LF14,
RNG_BIG_LF15,
RNG_BIG_LF16,
RNG_BIG_ERROR_CONF_EL,
TOTAL_SIGNAL_FOR_RNG_BIG,
TOTAL_GENERAL_SIGNAL_FOR_RNG_BIG  = (RNG_BIG_ZVN_NESPR_DZO - RNG_BIG_BLOCK_VKL_VVO),
TOTAL_DZO_SIGNAL_FOR_RNG_BIG      = (RNG_BIG_BLOCK_ZDZ -RNG_BIG_ZVN_NESPR_DZO), 

TOTAL_ZDZ_SIGNAL_FOR_RNG_BIG  = (RNG_BIG_NCN_MCZO-RNG_BIG_BLOCK_ZDZ),  
TOTAL_MCZO_SIGNAL_FOR_RNG_BIG  = (RNG_BIG_NCN_MCZR-RNG_BIG_NCN_MCZO),   
TOTAL_MCZR_SIGNAL_FOR_RNG_BIG  = (RNG_BIG_STAT_BLK_APV-RNG_BIG_NCN_MCZR),  
      
TOTAL_APV_SIGNAL_FOR_RNG_BIG = (RNG_BIG_ACHR_CHAPV_VID_DV-RNG_BIG_STAT_BLK_APV),
TOTAL_ACHR_CHAPV_SIGNAL_FOR_RNG_BIG = (RNG_BIG_PUSK_UROV_VID_DV-RNG_BIG_ACHR_CHAPV_VID_DV),
TOTAL_UROV_SIGNAL_FOR_RNG_BIG = (RNG_BIG_ZVN_NESPR_DZR-RNG_BIG_PUSK_UROV_VID_DV),
TOTAL_DZR_SIGNAL_FOR_RNG_BIG  = (RNG_BIG_BLOCK_UMIN1-RNG_BIG_ZVN_NESPR_DZR),      
TOTAL_UMIN_SIGNAL_FOR_RNG_BIG  = (RNG_BIG_BLOCK_UMAX1-RNG_BIG_BLOCK_UMIN1),
TOTAL_UMAX_SIGNAL_FOR_RNG_BIG  = (RNG_BIG_BLOCK_UP1-RNG_BIG_BLOCK_UMAX1),
TOTAL_UP_SIGNAL_FOR_RNG_BIG    = (RNG_BIG_DF1_IN-RNG_BIG_BLOCK_UP1),
TOTAL_VMP_SIGNAL_FOR_RNG_BIG   = 0,
TOTAL_EL_SIGNAL_FOR_RNG_BIG = (TOTAL_SIGNAL_FOR_RNG_BIG-RNG_BIG_DF1_IN),

N_BG_REMAINDER   = ((TOTAL_SIGNAL_FOR_RNG_BIG&0x1f)!= 0),

N_BG   =(  ((TOTAL_SIGNAL_FOR_RNG_BIG>>5)+(N_BG_REMAINDER))  ),

TOTAL_MTZ_STUB_SIGNAL_FOR_RNG_BIG = 0

};

//~~~   
//..................................................................................
//"""""


enum __mtz_const {
  RANG_BLOCK_MTZ = 0,
  RANG_BLOCK_USK_MTZ,
  RANG_SECTOR_VPERED_MTZN,
  RANG_SECTOR_NAZAD_MTZN,
  RANG_PO_MTZ,
  RANG_PO_MTZN_VPERED,
  RANG_PO_MTZN_NAZAD,
  RANG_PO_U_MTZPN,
  RANG_PO_MTZPN,
  RANG_MTZ,
  /*************************************/
  MTZ_SETTINGS_LENGTH
};

enum __mtz_levels_const {
  MTZ_LEVEL1 = 0,
  MTZ_LEVEL2,
  MTZ_LEVEL3,
  MTZ_LEVEL4,
  /*************************************/
  NUMBER_LEVEL_MTZ //Количество ступеней МТЗ
};

enum __mtz_abc_const {
  PHASE_MN_INDEX = 0,
  PHASE_BP_INDEX,
};

enum __mtz_abc_direction_const {
  MTZ_NEVYZN = 0,
  MTZ_VPERED,
  MTZ_NAZAD
};

/*****************************************/
//Макски сигналів, які можна зранжувати на функціональні кнопки у Режимі Кнопка
/*****************************************/
#define MASKA_BUTTON_MODE_0_SIGNALS_0 0

#define MASKA_BUTTON_MODE_0_SIGNALS_A01_0 (unsigned int)(         \
    (1u << (RANGE_SMALL_A01_RESET_LEDS - 0))       \
  | (1u << (RANGE_SMALL_A01_RESET_RELES- 0))       \
  | (1u << (RANGE_SMALL_A01_VKL_VVP    - 0))       \
  | (1u << (RANGE_SMALL_A01_OTKL_VVP   - 0))       \
  | (1u << (RANGE_SMALL_A01_RESET_BLOCK_READY_TU_VID_ZAHYSTIV - 0))      \
)

#define MASKA_BUTTON_MODE_0_SIGNALS_1 0

#define MASKA_BUTTON_MODE_0_SIGNALS_A01_1 (unsigned int)(   \
  0)


#define MASKA_BUTTON_MODE_0_SIGNALS_A01_2 (unsigned int)(         \
(1u << (RANGE_SMALL_A01_DF1_IN    &0x1f))    \
 | (1u << (RANGE_SMALL_A01_DF2_IN    &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF3_IN    &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF4_IN    &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF5_IN    &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF6_IN    &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF7_IN    &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF8_IN    &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF9_IN    &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF10_IN   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF11_IN   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF12_IN   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF13_IN   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF14_IN   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF15_IN   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DF16_IN   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DT1_SET   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DT1_RESET &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DT2_SET   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DT2_RESET &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DT3_SET   &0x1f)) \
 | (1u << (RANGE_SMALL_A01_DT3_RESET &0x1f)) \
)


#define MASKA_BUTTON_MODE_0_SIGNALS_A01_3 (unsigned int)(   \
(1u << (RANGE_SMALL_A01_DT4_RESET&0x1f)) \
 | (1u << (RANG_SMALL_A01_LF1 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF2 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF3 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF4 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF5 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF6 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF7 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF8 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF9 &0x1f)) \
 | (1u << (RANG_SMALL_A01_LF10&0x1f)) \
 | (1u << (RANG_SMALL_A01_LF11&0x1f)) \
 | (1u << (RANG_SMALL_A01_LF12&0x1f)) \
 | (1u << (RANG_SMALL_A01_LF13&0x1f)) \
 | (1u << (RANG_SMALL_A01_LF14&0x1f)) \
 | (1u << (RANG_SMALL_A01_LF15&0x1f)) \
 | (1u << (RANG_SMALL_A01_LF16&0x1f)) \
)
#define MASKA_BUTTON_MODE_1_SIGNALS_A01_0 (unsigned int)(         \
    (1u << (RANGE_SMALL_A01_BLOCK_VKL_VVO       - 0))       \
  | (1u << (RANGE_SMALL_A01_BLOCK_VKL_VVP       - 0))       \
  | (1u << (RANGE_SMALL_A01_MISCEVE_DYSTANCIJNE - 0))       \
  | (1u << (RANGE_SMALL_A01_1_GRUPA_USTAVOK     - 0))       \
  | (1u << (RANGE_SMALL_A01_2_GRUPA_USTAVOK     - 0))       \
  | (1u << (RANGE_SMALL_A01_3_GRUPA_USTAVOK     - 0))       \
  | (1u << (RANGE_SMALL_A01_4_GRUPA_USTAVOK     - 0))       \
  | (1u << (0-0))      \
)



#define MASKA_BUTTON_MODE_1_SIGNALS_A01_1  MASKA_BUTTON_MODE_0_SIGNALS_A01_1
#define MASKA_BUTTON_MODE_1_SIGNALS_A01_2  MASKA_BUTTON_MODE_0_SIGNALS_A01_2
#define MASKA_BUTTON_MODE_1_SIGNALS_A01_3  MASKA_BUTTON_MODE_0_SIGNALS_A01_3


#include "ism.h"
#include "dzo_bit.h"
#include "mtzo_bit.h"  
#include "el_bit.h"  
#include "drca_bit.h"
#include "lgp.h"

/*****************************************/

/*****************************************/
//Макска моніторингу максимального фазного струму для фіксації КЗ
/*****************************************/
#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_0   0

#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_1 (unsigned int)(0)/* \
     (1u << (RANG_PO_DZ1 - 32))                               \
   | (1u << (RANG_PO_DIR_DZ2 - 32))                           \
   | (1u << (RANG_PO_INV_DZ2 - 32))                           \
   | (1u << (RANG_PO_DIR_DZ3 - 32))                           \
   | (1u << (RANG_PO_INV_DZ3 - 32))                           \
   | (1u << (RANG_PO_DIR_DZ4 - 32))                           \
)*/

#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_2 (unsigned int)(0)/* (  \
     (1u << (RANG_PO_INV_DZ4 - 64))                           \
)*/

#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_3        0
#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_4        0
#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_5        0
#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_6        0
#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_7        0
#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_8        0
#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_9        0
#define MASKA_MONITOTYNG_PHASE_SIGNALES_KZ_10       0
/*****************************************/


/*****************************************/
//Відключення від захистів
/*****************************************/
typedef enum __vymknennja_vid_zakhystiv__
{
  VYMKNENNJA_VID_DZ_1,
  VYMKNENNJA_VID_AMTZ_DZ_1,
  VYMKNENNJA_VID_DZ_2,
  VYMKNENNJA_VID_AMTZ_DZ_2,
  VYMKNENNJA_VID_DZ_3,
  VYMKNENNJA_VID_AMTZ_DZ_3,
  VYMKNENNJA_VID_DZ_4,
  VYMKNENNJA_VID_AMTZ_DZ_4,
  
  VYMKNENNJA_VID_MTZ1,
  VYMKNENNJA_VID_MTZ2,
  VYMKNENNJA_VID_MTZ3,
  VYMKNENNJA_VID_MTZ4,
  
  VYMKNENNJA_VID_ZDZ,

  VYMKNENNJA_VID_3I0,
  VYMKNENNJA_VID_3U0,
  VYMKNENNJA_VID_NZZ,

  VYMKNENNJA_VID_TZNP1,
  VYMKNENNJA_VID_TZNP2,
  VYMKNENNJA_VID_TZNP3,

  VYMKNENNJA_VID_ACHR_CHAPV_VID_DV,
  VYMKNENNJA_VID_ACHR_CHAPV1,
  VYMKNENNJA_VID_ACHR_CHAPV2,

  VYMKNENNJA_VID_UROV1,
  VYMKNENNJA_VID_UROV2,

  VYMKNENNJA_VID_ZOP,

  VYMKNENNJA_VID_UMIN1,
  VYMKNENNJA_VID_UMIN2,

  VYMKNENNJA_VID_UMAX1,
  VYMKNENNJA_VID_UMAX2,

  VYMKNENNJA_VID_UP1,
  
  VYMKNENNJA_VID_ZOVNISHNIKH_ZAKHYSTIV = VYMKNENNJA_VID_UP1 + NUMBER_UP,
  
  VYMKNENNJA_VID_INSHYKH_SYGNALIV,
    
  VYMKNENNJA_VID_MAX_NUMBER  
  
}__vymknennja_vid_zakhystiv;
/*****************************************/

/*****************************************/
//Світлоіндикатори
/*****************************************/
//Нумерація  усправлінських світлоіндикаторів
enum _leds_ctrl
{
  LED_CTRL_R_E = 0,
  LED_CTRL_START,
  LED_CTRL_TRIP,
  LED_CTRL_I,
  LED_CTRL_O
};

enum _leds_colors
{
  LED_COLOR_RED_BIT = 0,
  LED_COLOR_GREEN_BIT,
  
  NUMBER_LED_COLOR
};

//Кількість управлінських стовпців
#define LED_N_COL       7
#define LED_N_ROW       8
/*****************************************/

/*****************************************/
//Максимальна кількість сигналів (функцій), які можуть бути зранжовані на входи/виходи/світлоіндикатори/д.реєстратор/оф
/*****************************************/
#define VAGA_MAX_FUNCTIONS_IN_INPUT             3
#define MAX_FUNCTIONS_IN_INPUT                  (1u << VAGA_MAX_FUNCTIONS_IN_INPUT)
#define VAGA_MAX_FUNCTIONS_IN_OUTPUT            4
#define MAX_FUNCTIONS_IN_OUTPUT                 (1u << VAGA_MAX_FUNCTIONS_IN_OUTPUT)
#define VAGA_MAX_FUNCTIONS_IN_LED               3
#define MAX_FUNCTIONS_IN_LED                    (1u << VAGA_MAX_FUNCTIONS_IN_LED)
#define VAGA_MAX_FUNCTIONS_IN_DF                4
#define MAX_FUNCTIONS_IN_DF                     (1u << VAGA_MAX_FUNCTIONS_IN_DF)
#define MAX_FUNCTIONS_IN_DT                     6
#define MAX_FUNCTIONS_IN_D_AND                  NUMBER_IN_AND
#define MAX_FUNCTIONS_IN_D_OR                   NUMBER_IN_OR
#define MAX_FUNCTIONS_IN_D_XOR                  2
#define MAX_FUNCTIONS_IN_D_NOT                  1
#define VAGA_MAX_FUNCTIONS_IN_DB                3
#define MAX_FUNCTIONS_IN_DB                     (1u << VAGA_MAX_FUNCTIONS_IN_DB)
#define VAGA_MAX_FUNCTIONS_IN_AREG              5
#define MAX_FUNCTIONS_IN_AREG                   (1u << VAGA_MAX_FUNCTIONS_IN_AREG)
#define VAGA_MAX_FUNCTIONS_IN_DREG              5
#define MAX_FUNCTIONS_IN_DREG                   (1u << VAGA_MAX_FUNCTIONS_IN_DREG)
#define VAGA_MAX_FUNCTIONS_IN_OFF_CB            5
#define MAX_FUNCTIONS_IN_OFF_CB                 (1u << VAGA_MAX_FUNCTIONS_IN_OFF_CB)
#define VAGA_MAX_FUNCTIONS_IN_ON_CB             5
#define MAX_FUNCTIONS_IN_ON_CB                  (1u << VAGA_MAX_FUNCTIONS_IN_ON_CB)
/*****************************************/


/*****************************************/
//Константи для комунікації
/*****************************************/
#define MAX_CHAR_IN_NAME_OF_CELL                              32
/*****************************************/

/*****************************************/
//Константи для фіксації зміни настройок
/*****************************************/
#define CHANGED_ETAP_NONE                                     0
#define CHANGED_ETAP_EXECUTION                                1
#define CHANGED_ETAP_ENDED                                    2
#define CHANGED_ETAP_ENDED_EXTRA_ETAP                         3
/*****************************************/

/*****************************************/
/*****************************************/
enum __odynyci_vymirjuvannja {
INDEX_A = 0,
INDEX_V,
INDEX_SECOND,

NUMBER_ODYNYCI_VYMIRJUVANNJA
};

#define SIZE_R_DIMENSION    2
/*****************************************/

/*****************************************/
//Індетифікатор типу набору юстуючих коефіцієнтів
/*****************************************/
//#define ADJUSTMENT_3I0_IA_IB_IC                             1
//#define ADJUSTMENT_3I0_IA_IC_3U0                            2
//#define ADJUSTMENT_3I0_IA_IB_IC_UA_UB_UC_UABTN2             3
#define ADJUSTMENT_3I0_IA_IB_IC_UA_UB_UC_3U0                  4
#define ADJUSTMENT_ID                                         ADJUSTMENT_3I0_IA_IB_IC_UA_UB_UC_3U0
/*****************************************/

/*****************************************/
//Версія програмного забезпечення
/*****************************************/
#define VERSIA_PZ                                             19
#define MODYFIKACIA_VERSII_PZ                                 1
#define ZBIRKA_VERSII_PZ                                      0
#define ZBIRKA_PIDVERSII_PZ                                   0
/*****************************************/

/*****************************************/
//Час компіляції
/*****************************************/

#define YEAR_VER                                              ((__DATE__[9] != ' ') ? (((__DATE__[9] - 0x30) << 4) | (__DATE__[10] - 0x30)) : (__DATE__[10] - 0x30))
#define MONTH_VER                                             str_to_int_DATE_Mmm()
#define DAY_VER                                               ((__DATE__[4] != ' ') ? (((__DATE__[4] - 0x30) << 4) | (__DATE__[5] - 0x30)) : (__DATE__[5] - 0x30))
#define HOUR_VER                                              (((__TIME__[0] - 0x30) << 4) | (__TIME__[1] - 0x30))
#define MINUTE_VER                                            (((__TIME__[3] - 0x30) << 4) | (__TIME__[4] - 0x30))
#define SECOND_VER                                            (((__TIME__[6] - 0x30) << 4) | (__TIME__[7] - 0x30))
/*****************************************/

/*****************************************/
//Версія універсальної карти памяті
/*****************************************/
#define VERSIA_GMM                                             8
#define MODYFIKACIA_VERSII_GMM                                 2
/*****************************************/
#endif